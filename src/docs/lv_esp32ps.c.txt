/**
 * @file lv_esp32PS.c
 *
 */

/*********************
 *      INCLUDES
 *********************/
#include "lv_esp32ps.h"

/*********************
 *      DEFINES
 *********************/

/**********************
 *      TYPEDEFS
 **********************/
typedef enum
{
    DISP_SMALL,
    DISP_MEDIUM,
    DISP_LARGE,
} disp_size_t;

/**********************
 *  STATIC PROTOTYPES
 **********************/
static void lv_bar(lv_obj_t *parent, int32_t value);
static void panel(lv_obj_t *parent, lv_obj_t *obj, lv_obj_t *label, lv_coord_t x_ofs, lv_coord_t y_ofs, lv_obj_t *labelCurrent);
static void graph_create(lv_obj_t *parent);
static void analytics_create(lv_obj_t *parent);
static void shop_create(lv_obj_t *parent);
static void darkModeButton(lv_obj_t *parent, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs, lv_event_cb_t event_cb);

static void color_changer_create(lv_obj_t *parent);

static lv_obj_t *create_meter_box(lv_obj_t *parent, const char *title, const char *text1, const char *text2,
                                  const char *text3);
static lv_obj_t *create_shop_item(lv_obj_t *parent, const void *img_src, const char *name, const char *category,
                                  const char *price);

static void color_changer_event_cb(lv_event_t *e);
static void color_event_cb(lv_event_t *e);
static void ta_event_cb(lv_event_t *e);
static void birthday_event_cb(lv_event_t *e);
static void calendar_event_cb(lv_event_t *e);
static void slider_event_cb(lv_event_t *e);
static void chart_event_cb(lv_event_t *e);
static void shop_chart_event_cb(lv_event_t *e);
static void meter1_indic1_anim_cb(void *var, int32_t v);
static void meter1_indic2_anim_cb(void *var, int32_t v);
static void meter1_indic3_anim_cb(void *var, int32_t v);
static void meter2_timer_cb(lv_timer_t *timer);
static void meter3_anim_cb(void *var, int32_t v);

/**********************
 *  STATIC VARIABLES
 **********************/
static disp_size_t disp_size;

static lv_obj_t *tv;
static lv_obj_t *calendar;
static lv_style_t style_text_muted;
static lv_style_t style_voltage;
static lv_style_t style_tabview_df, style_tabview_pr;
static lv_style_t style_icon;
static lv_style_t style_bullet;

static lv_obj_t *meter1;
static lv_obj_t *meter2;
static lv_obj_t *meter3;

static lv_obj_t *chart1;
static lv_obj_t *chart2;
static lv_obj_t *chart3;

static lv_chart_series_t *ser1;
static lv_chart_series_t *ser2;
static lv_chart_series_t *ser3;
static lv_chart_series_t *ser4;

static const lv_font_t *font_VCMeasure;
static const lv_font_t *font_VCSet;

static uint32_t session_desktop = 1000;
static uint32_t session_tablet = 1000;
static uint32_t session_mobile = 1000;

/**********************
 *  GLOBAL VARIABLES
 **********************/
extern  labelVoltage,labelCurrent,bar ;


void lv_esp32ps()
{

    /*Create a Tab view object*/
    lv_obj_t *tabview;
    tabview = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, 16);

    /*Add tabs (the tabs are page (lv_page) and can be scrolled*/
    lv_obj_t *tab0 = lv_tabview_add_tab(tabview, "Stats");
    lv_obj_t *tab1 = lv_tabview_add_tab(tabview, "Graph");
    lv_obj_t *tab2 = lv_tabview_add_tab(tabview, "Main");
    lv_obj_t *tab3 = lv_tabview_add_tab(tabview, "Utility");
    lv_obj_t *tab4 = lv_tabview_add_tab(tabview, "Setting");

    lv_style_init(&style_tabview_df);
    lv_style_init(&style_tabview_pr);
    lv_style_set_text_font(&style_tabview_df, &lv_font_montserrat_10);
    lv_obj_add_style(tabview, &style_tabview_df, LV_STATE_DEFAULT);
    lv_style_set_text_font(&style_tabview_pr, &lv_font_montserrat_14);
    lv_obj_add_style((tabview), &style_tabview_pr, LV_STATE_PRESSED);

    lv_obj_set_style_bg_color(tab0, lv_color_hex(0x000800), 0);
    lv_obj_set_style_bg_opa(tab0, LV_OPA_COVER, 0);

    lv_obj_set_style_bg_color(tab4, lv_color_hex(0x000800), 0);
    lv_obj_set_style_bg_opa(tab4, LV_OPA_COVER, 0);

    ///////////////////////////
    // Tab1 Measurement fonts
    ///////////////////////////
    graph_create(tab1);

    ///////////////////////////
    // Tab2 Measurement fonts
    ///////////////////////////
    lv_obj_t *thePanel;
    panel(tab2, thePanel, labelVoltage, -16, +39, labelCurrent);

    ///////////////////////////
    // Toggle button  Tab2 & Tab4
    ///////////////////////////
    darkModeButton(tab2, LV_ALIGN_TOP_RIGHT, -4, -2, NULL);
    darkModeButton(tab4, LV_ALIGN_BOTTOM_RIGHT, -2, -4, ta_event_cb);

    lv_obj_set_style_bg_color(tab2, lv_color_hex(0x000800), 0);
    lv_obj_add_state(tab2, LV_STATE_PRESSED);

    lv_bar_set_value(tabview, 3, LV_ANIM_OFF);
    lv_obj_set_parent(bar, tab2);
    lv_tabview_set_act(tabview, 2, LV_ANIM_OFF);
}

static void panel(lv_obj_t *parent, lv_obj_t *obj, lv_obj_t *label, lv_coord_t x_ofs, lv_coord_t y_ofs, lv_obj_t *label2)
{

    static lv_style_t style_shadow;
    lv_style_init(&style_shadow);
    lv_style_set_shadow_width(&style_shadow, 8);
    lv_style_set_shadow_spread(&style_shadow, 4);
    lv_style_set_shadow_color(&style_shadow, lv_palette_main(LV_PALETTE_BLUE));

    lv_style_set_width(&style_shadow, 302);
    lv_style_set_height(&style_shadow, 204);
    lv_style_set_pad_all(&style_shadow, 0);

    lv_style_set_bg_color(&style_shadow, lv_color_hex(0x000000));
    lv_style_set_x(&style_shadow, -8);
    lv_style_set_y(&style_shadow, -6);

    obj = lv_obj_create(parent);
    lv_obj_add_style(obj, &style_shadow, LV_STATE_DEFAULT);
    lv_obj_set_style_bg_opa(obj, LV_OPA_COVER, 0);

    font_VCMeasure = &dseg_b_48;
    font_VCSet = &Undertale_16b; // c64esque_12b4;   //lv_font_unscii_16; // lv_font_montserrat_14;
    int pad_m2set_y = 18;
    int pad_m2set_x = -12;
    /////////////////////////
    // V-Set
    /////////////////////////
    lv_obj_t *labelVset = lv_label_create(obj);
    lv_label_set_text(labelVset, "V-Set:12.3456");

    static lv_style_t style_vcset;

    lv_style_init(&style_vcset);
    lv_style_set_text_font(&style_vcset, font_VCSet); // Tauri_R_56,SairaExtraCondensed_R_56, PathwayGothicOne_R_56
    // lv_style_set_text_color(&style_vcset, lv_palette_lighten(LV_PALETTE_AMBER, 5));

    lv_style_set_text_letter_space(&style_vcset, 2);

    lv_obj_align(labelVset, 0, 5, 4);

    lv_obj_add_style(labelVset, &style_vcset, LV_STATE_DEFAULT);


    /////////////////////////
    // V-Measure
    /////////////////////////
    lv_style_init(&style_voltage);
    lv_style_set_text_letter_space(&style_voltage, 0);

    lv_style_set_text_color(&style_voltage, lv_palette_main(LV_PALETTE_INDIGO) /*lv_palette_darken(LV_PALETTE_GREEN, 3)*/);

    lv_style_set_text_font(&style_voltage, font_VCMeasure);
    lv_obj_add_style(label, &style_voltage, LV_STATE_DEFAULT);

    lv_obj_set_parent(label, labelVset);

    // lv_obj_align_to(label, obj, LV_ALIGN_TOP_LEFT, 0, 0);
    lv_obj_align(label, LV_ALIGN_DEFAULT, pad_m2set_x, pad_m2set_y); //-16

    /////////////////////////
    // Unit "V"
    /////////////////////////
    static lv_style_t style_unitVC;
    lv_style_init(&style_unitVC);
    lv_style_set_text_font(&style_unitVC, &Tauri_R_56); // Tauri_R_56,SairaExtraCondensed_R_56, PathwayGothicOne_R_56
    // lv_style_set_text_color(&style_unitVC, lv_palette_main(LV_PALETTE_BLUE));

    lv_obj_t *labelUnit = lv_label_create(label);
    lv_label_set_text(labelUnit, "V");
    // lv_obj_align(labelUnit, 0, 246, -12+6);
    lv_obj_align(labelUnit, 0, 224, -5);
    lv_obj_add_style(labelUnit, &style_unitVC, LV_STATE_DEFAULT);

    /////////////////////////
    // I-Set
    /////////////////////////
    lv_obj_t *labelIset = lv_label_create(labelVset);
    lv_label_set_text(labelIset, "I-Set:01.2345");
    lv_obj_align(labelIset, 0, 0, 92);
    lv_obj_add_style(labelIset, &style_vcset, LV_STATE_DEFAULT);

    /////////////////////////
    // I-Measure
    /////////////////////////
    // static lv_style_t style_current;
    // lv_style_init(&style_current);
    // lv_style_set_text_letter_space(&style_current, 0);
    // lv_style_set_text_color(&style_current, lv_palette_main(LV_PALETTE_BLUE) /*lv_palette_darken(LV_PALETTE_GREEN, 3)*/);
    // lv_style_set_text_font(&style_voltage, font_VCMeasure);
    lv_obj_add_style(label2, &style_voltage, LV_STATE_DEFAULT);

    lv_obj_set_parent(label2, labelIset);
    // lv_obj_align_to(label, obj, LV_ALIGN_TOP_LEFT, 0, 0);
    lv_obj_align(label2, LV_ALIGN_DEFAULT, pad_m2set_x, pad_m2set_y); //-16

    /////////////////////////
    // Unit "I"
    /////////////////////////
    labelUnit = lv_label_create(label2);
    lv_label_set_text(labelUnit, "A");
    // lv_obj_align(labelUnit, 0, 246, -12+6);
    lv_obj_add_style(labelUnit, &style_unitVC, LV_STATE_DEFAULT);
    lv_obj_align(labelUnit, LV_ALIGN_TOP_LEFT, 224, -5);

    // lv_bar(obj,value);
}

static void set_temp(void *bar, int32_t temp)
{
    lv_bar_set_value(bar, temp, LV_ANIM_ON);
}

/**
 * Bar with stripe pattern and ranged value
 */
static void lv_bar(lv_obj_t *parent, int32_t value)
{
    LV_IMG_DECLARE(img_skew_strip);
    static lv_style_t style_indic;

    lv_style_init(&style_indic);
    // lv_style_set_bg_img_src(&style_indic, &img_skew_strip);
    // lv_style_set_bg_img_tiled(&style_indic, true);
    lv_style_set_bg_img_opa(&style_indic, LV_OPA_50);

    lv_obj_t *bar = lv_bar_create(parent);
    lv_obj_add_style(bar, &style_indic, LV_PART_INDICATOR);

    lv_obj_set_size(bar, 260, 7);
    // lv_obj_center(bar);
    lv_obj_align(bar, 0, 10, 80);
    // lv_bar_set_mode(bar, LV_BAR_MODE_RANGE);
    lv_bar_set_value(bar, value, LV_ANIM_OFF);
    // lv_bar_set_start_value(bar, 0, LV_ANIM_OFF);
}

static void graph_create(lv_obj_t *parent)
{

    lv_obj_t *label = lv_label_create(parent);
    lv_label_set_text(label, "\n\n\n\n\nGraph Axis will be here!n\n"
                             "If the content\n");
}

static void ta_event_cb(lv_event_t *e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t *kb = lv_event_get_user_data(e);

    lv_obj_t *btn = lv_event_get_target(e);

    lv_state_t a = lv_obj_get_state(btn);

    if (code == LV_EVENT_VALUE_CHANGED)
    {

        if (lv_obj_get_state(btn) & LV_STATE_CHECKED)
        {

            lv_obj_t *label = lv_obj_get_child(btn, 0);
            lv_label_set_text(label, "ON");

            lv_disp_t *lv_disp = lv_disp_get_default();
            lv_theme_t *th = lv_theme_default_init(lv_disp,                                                           /*Use the DPI, size, etc from this display*/
                                                   lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), /*Primary and secondary palette*/
                                                   true,                                                              /*Light or dark mode*/
                                                   &lv_font_montserrat_16);

 
        }

        else
        {

            lv_obj_t *label = lv_obj_get_child(btn, 0);
            lv_label_set_text(label, "OFF");
            lv_disp_t *lv_disp = lv_disp_get_default();
            lv_theme_t *th = lv_theme_default_init(lv_disp,                                                         /*Use the DPI, size, etc from this display*/
                                                   lv_palette_main(LV_PALETTE_DEEP_PURPLE), lv_color_hex(0xFF0000), /*Primary and secondary palette*/
                                                   false,                                                           /*Light or dark mode*/
                                                   &lv_font_montserrat_16);
            lv_disp_set_theme(lv_disp, &th);
        }
    }
}

static void darkModeButton(lv_obj_t *parent, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs, lv_event_cb_t event_cb)
{
    lv_obj_t *label;
    lv_obj_t *btn2 = lv_btn_create(parent);

    lv_obj_add_event_cb(btn2, event_cb, LV_EVENT_ALL, NULL);
    lv_obj_align(btn2, align, x_ofs, y_ofs);
    lv_obj_add_flag(btn2, LV_OBJ_FLAG_CHECKABLE);
    lv_obj_set_size(btn2, 48, 24);

    label = lv_label_create(btn2);
    lv_label_set_text(label, "ON");
    lv_obj_center(label);
    lv_obj_add_state(btn2, LV_STATE_CHECKED);

    static lv_style_t style_btn;
    lv_style_init(&style_btn);
    lv_style_set_text_font(&style_btn, &lv_font_montserrat_16);
    lv_obj_add_style(btn2, &style_btn, LV_STATE_DEFAULT);
}